//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use daoyi_common_support::utils;
use sea_orm::{ActiveValue, entity::prelude::*};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "demo_system_user")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    pub name: String,
    pub gender: utils::enumeration::Gender,
    pub account: String,
    #[serde(skip_serializing)]
    pub password: String,
    pub mobile_phone: String,
    pub birthday: Date,
    pub enabled: bool,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait::async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(mut self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        if insert {
            self.id = ActiveValue::Set(utils::id::next_id());
        }
        Ok(self)
    }
}
